Chapter 3: Constraint-satisfaction problems
CSPs are composed of variables with possible values that fall into ranges known as domains.  There are 3 core concepts: domain, constraints
and variables. 


Constraints will be defined using a Constraint class. Each Constraint consists of the variables it constrains and a method that checks 
whether it is satisfied(). The default implementation should be overridden. In fact, it must be, because we are defining our Constraint 
class as an abstract base class. Abstract base classes are not meant to be instantiated. Instead, only their subclasses that override and 
implement their @abstractmethods are for actual use.

Within CSP, the variables, domains, and constraints collections are of types that you would expect. The variables collection is a list of 
variables, domains is a dict mapping variables to lists of possible values (the domains of those variables), and constraints is a dict that
maps each variable to a list of the constraints imposed on it.

Backtracking is the idea that once you hit a wall in your search, you go back to the last known point where you made a decision before the 
wall, and choose a different path. 

Chapter 5: Genetic algorithms
In computer science, genetic algorithms are a simulation of natural selection to solve computational challenges.
A genetic algorithm includes a population (group) of individuals known as chromosomes. The chromosomes, each composed of genes that 
specify their traits, are competing to solve some problem. How well a chromosome solves a problem is defined by a fitness function.
The genetic algorithm goes through generations. In each generation, the chromosomes that are more fit are more likely to be selected to 
reproduce. There is also a probability in each generation that two chromosomes will have their genes merged. This is known as crossover. 
And finally, there is the important possibility in each generation that a gene in a chromosome may mutate (randomly change).

Genetic algorithm takes:
1-Create an initial population of random chromosomes for the first generation of the algorithm.
2-easure the fitness of each chromosome in this generation of the population. If any exceeds the threshold, return it, and the algorithm ends.
3-Select some individuals to reproduce, with a higher probability of selecting those with the highest fitness.
4-Crossover (combine), with some probability, some of the selected chromosomes to create children that represent the population of the next 
generation.
5-Mutate, usually with a low probability, some of those chromosomes. The population of the new generation is now complete, and it replaces 
the population of the last generation.
6-Return to step 2 unless the maximum number of generations has been reached. If that is the case, return the best chromosome found so far.

